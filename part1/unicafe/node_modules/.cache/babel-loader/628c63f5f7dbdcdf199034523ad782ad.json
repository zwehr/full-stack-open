{"ast":null,"code":"var _jsxFileName = \"/Users/zwehr/Documents/programming/full-stack-open/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.handleGood,\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.handleNeutral,\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.handleBad,\n      children: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\n\nconst StatisticLine = props => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [props.text, \" \", props.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = StatisticLine;\n\nconst Statistics = props => {\n  const all = props.good + props.neutral + props.bad;\n\n  if (all > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"good\",\n        value: props.good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"neutral\",\n        value: props.neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"bad\",\n        value: props.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"all\",\n        value: all\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"average\",\n        value: (props.good - props.bad) / all\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"positive\",\n        value: \"{props.good / all * 100} %\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Statistics;\n\nconst App = () => {\n  _s();\n\n  //save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [all, setAll] = useState(0);\n\n  const handleGood = () => {\n    setGood(good + 1);\n    setAll(all + 1);\n  };\n\n  const handleNeutral = () => {\n    setNeutral(neutral + 1);\n    setAll(all + 1);\n  };\n\n  const handleBad = () => {\n    setBad(bad + 1);\n    setAll(all + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleGood: handleGood,\n      handleNeutral: handleNeutral,\n      handleBad: handleBad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"uTssgC4nlUSepBgkUpbW/ujAc84=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"StatisticLine\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/zwehr/Documents/programming/full-stack-open/part1/unicafe/src/App.js"],"names":["React","useState","Button","props","handleGood","handleNeutral","handleBad","StatisticLine","text","value","Statistics","all","good","neutral","bad","App","setGood","setNeutral","setBad","setAll"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Button = (props) => {\n  return (\n    <div>\n      <button onClick={props.handleGood}>good</button>\n      <button onClick={props.handleNeutral}>neutral</button>\n      <button onClick={props.handleBad}>bad</button>\n    </div>\n  )\n}\n\nconst StatisticLine = (props) => {\n  return (\n    <p>{props.text} {props.value}</p>\n  )\n}\n\nconst Statistics = (props) => {\n  const all = props.good + props.neutral + props.bad\n\n  if (all > 0) {\n    return (\n      <div>\n        <StatisticLine text=\"good\" value={props.good} />\n        <StatisticLine text=\"neutral\" value={props.neutral} />\n        <StatisticLine text=\"bad\" value={props.bad} />\n        <StatisticLine text=\"all\" value={all} />\n        <StatisticLine text=\"average\" value={(props.good - props.bad) / all} />\n        <StatisticLine text=\"positive\" value=\"{props.good / all * 100} %\" />\n      </div>\n    )\n  } else return (\n    <div>\n      <h2>statistics</h2>\n      <p>No feedback given</p>\n    </div>\n  )\n}\n\nconst App = () => {\n  //save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [all, setAll] = useState(0)\n\n  const handleGood = () => {\n    setGood(good + 1)\n    setAll(all + 1)\n  }\n\n  const handleNeutral = () => {\n    setNeutral(neutral + 1)\n    setAll(all + 1)\n  }\n  const handleBad = () => {\n    setBad(bad + 1)\n    setAll(all + 1)\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button handleGood={handleGood} handleNeutral={handleNeutral} handleBad={handleBad} />\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}